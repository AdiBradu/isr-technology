{"version":3,"file":"static/js/283.4f2eba2d.chunk.js","mappings":"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","sources":["components/Input/Input.component.jsx","components/Textarea/Textarea.component.jsx","components/Button/Button.component.jsx","components/Form/Form.component.jsx","components/Contact/Contact.component.jsx"],"sourcesContent":["import React from 'react';\nimport './Input.component.scss';\n\nexport default function Input({\n  label,\n  name,\n  type,\n  value,\n  placeholder,\n  onChange,\n  error,\n}) {\n  return (\n    <div className=\"input\">\n      <label>\n        <p className=\"caption\">{label}</p>\n      </label>\n      <input\n        type={type}\n        placeholder={placeholder}\n        onChange={onChange}\n        value={value}\n        name={name}\n      />\n      <p className=\"small error\">{error}</p>\n    </div>\n  );\n}\n","import React from 'react';\nimport './Textarea.component.scss';\n\nexport default function Textarea({\n  label,\n  name,\n  type,\n  value,\n  placeholder,\n  onChange,\n  error,\n}) {\n  return (\n    <div className=\"textarea\">\n      <label>\n        <p className=\"caption\">{label}</p>\n      </label>\n      <textarea\n        placeholder={placeholder}\n        onChange={onChange}\n        name={name}\n        value={value}\n      ></textarea>\n      <p className=\"small error\">{error}</p>\n    </div>\n  );\n}\n","import React from 'react';\nimport './Button.component.scss';\n\nexport default function Button({ type, text, status, bgColor, color, width }) {\n  return (\n    <button\n      className=\"form-send-button\"\n      type={type}\n      style={{ backgroundColor: bgColor, color: color, width: width }}\n    >\n      <p className=\"btn\">{text ? text : status}</p>\n    </button>\n  );\n}\n","import React, { useState, useEffect, useContext, useRef } from 'react';\nimport axios from 'axios';\nimport './Form.component.scss';\nimport variables from '../../styles/_variables.module.scss';\nimport Sectionh2 from '../SectionH2/Sectionh2.component.jsx';\nimport Input from '../Input/Input.component.jsx';\nimport Textarea from '../Textarea/Textarea.component.jsx';\nimport Button from '../Button/Button.component.jsx';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport { AppContext } from '../../AppContext';\n\nexport default function Form() {\n  const initialValues = { name: '', email: '', message: '' };\n  const [formValues, setFormValues] = useState(initialValues);\n  const [formErrors, setFormErrors] = useState({});\n  const [isSubmit, setIsSubmit] = useState(false);\n  const [isValid, setIsValid] = useState(false);\n  const [status, setStatus] = useState('SEND INQUIRY');\n  const { themeColorObj } = useContext(AppContext);\n  const themeColor = themeColorObj[0];\n\n  const recaptchaRef = useRef();\n\n  const mailformat =\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormValues({ ...formValues, [name]: value });\n  };\n\n  const validate = (values) => {\n    const errors = {};\n    if (!values.name) {\n      errors.name = 'Your name is required!';\n    }\n    if (!values.email) {\n      errors.email = 'Your email is required!';\n    } else if (!mailformat.test(values.email)) {\n      errors.email = 'Your email is not valid!';\n    }\n    if (!values.message) {\n      errors.message = 'A message is required!';\n    }\n    return errors;\n  };\n\n  const resetValues = () => {\n    setTimeout(function () {\n      setStatus('SEND INQUIRY');\n      setIsSubmit(false);\n      setIsValid(false);\n      setFormValues(initialValues);\n    }, 3000);\n  };\n\n  const sendForm = async () => {\n    try {\n      const token = await recaptchaRef.current.executeAsync();\n      const { name, email, message } = formValues;\n      await axios.post('/contact', {\n        name,\n        email,\n        message,\n        token,\n      });\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setIsSubmit(true);\n    setFormErrors(validate(formValues));\n  };\n\n  useEffect(() => {\n    if (Object.keys(formErrors).length === 0 && isSubmit) {\n      setIsValid(true);\n    } else if (Object.keys(formErrors).length !== 0 && isSubmit) {\n      setStatus('TRY AGAIN!');\n    }\n  }, [formErrors, isSubmit]);\n\n  useEffect(() => {\n    if (isValid) {\n      setStatus('THANK YOU!');\n      sendForm();\n      resetValues();\n    }\n  }, [isValid]);\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Sectionh2 h2={'Send your inquiry'} />\n      <Input\n        label={'name'}\n        type={'text'}\n        placeholder={'Your name'}\n        onChange={handleChange}\n        name={'name'}\n        value={formValues.name}\n        error={formErrors.name}\n      />\n      <Input\n        label={'email'}\n        type={'email'}\n        placeholder={'Your email address'}\n        onChange={handleChange}\n        name={'email'}\n        value={formValues.email}\n        error={formErrors.email}\n      />\n      <Textarea\n        label={'message'}\n        placeholder={'Please type your message'}\n        onChange={handleChange}\n        name={'message'}\n        value={formValues.message}\n        error={formErrors.message}\n      />\n      <div>\n        <p className=\"small\">\n          This site is protected by reCAPTCHA and the Google\n          <a\n            href=\"https://policies.google.com/privacy\"\n            style={{ color: `${variables.secondaryColorDark}` }}\n          >\n            {' '}\n            Privacy Policy\n          </a>{' '}\n          and\n          <a\n            href=\"https://policies.google.com/terms\"\n            style={{ color: `${variables.secondaryColorDark}` }}\n          >\n            {' '}\n            Terms of Service\n          </a>{' '}\n          apply.\n        </p>\n      </div>\n      <Button\n        type={'submit'}\n        status={status}\n        bgColor={variables.secondaryColor}\n        colors={variables.primaryColor}\n        width={'100%'}\n      />\n      <ReCAPTCHA\n        ref={recaptchaRef}\n        sitekey={'6LeMJE4eAAAAAMTccweQVhjvYKhRjfAO9wrVFsQI'}\n        theme={themeColor === 'light' ? 'light' : 'dark'}\n        size=\"invisible\"\n      />\n    </form>\n  );\n}\n","import React, { useContext } from 'react';\nimport './Contact.component.scss';\nimport Container from '../../components/Container/Container.component.jsx';\nimport { AppContext } from '../../AppContext';\nimport Sectionh1 from '../SectionH1/Sectionh1.component';\nimport MarkdownParagraph from '../../components/MarkdownParagraph/MarkdownParagraph.component.jsx';\nimport Form from '../Form/Form.component.jsx';\nimport Icon from '../Icon/Icon.component.jsx';\nimport Footer from '../../components/Footer/Footer.component.jsx';\nimport SShape from '../../assets/icons/sShape.svg';\n\nexport default function Contact() {\n  const { isMD } = useContext(AppContext);\n\n  return (\n    <section className=\"contact\" id=\"contact\">\n      <Container\n        display={`grid`}\n        maxWidth={`1200px`}\n        columns={ isMD ? `repeat(4, 1fr)` :  `repeat(1, 1fr)`}\n        rows={`repeat(3, auto)`}\n        classe={`lp-container`}\n      >\n        <div className=\"section-intro\">\n          <Sectionh1 h1={`contact, navigation & social media`} />\n          <MarkdownParagraph fileName={'contact.md'} />\n        </div>\n        <Form />\n        <Footer/>\n      </Container>\n      <Icon icon={SShape} class={'s-shape-down'} />\n    </section>\n  );\n}\n"],"names":["Input","_ref","label","name","type","value","placeholder","onChange","error","_jsxs","className","children","_jsx","Textarea","Button","text","status","bgColor","color","width","style","backgroundColor","Form","initialValues","email","message","formValues","setFormValues","useState","formErrors","setFormErrors","isSubmit","setIsSubmit","isValid","setIsValid","setStatus","themeColorObj","useContext","AppContext","themeColor","recaptchaRef","useRef","mailformat","handleChange","e","target","useEffect","Object","keys","length","async","token","current","executeAsync","axios","post","err","console","sendForm","setTimeout","onSubmit","event","preventDefault","values","errors","test","validate","Sectionh2","h2","href","concat","variables","secondaryColorDark","secondaryColor","colors","primaryColor","ReCAPTCHA","ref","sitekey","theme","size","Contact","isMD","id","Container","display","maxWidth","columns","rows","classe","Sectionh1","h1","MarkdownParagraph","fileName","Footer","Icon","icon","SShape","class"],"sourceRoot":""}